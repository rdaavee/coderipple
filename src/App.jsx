import { useState, useEffect } from "react";
import { Code, Play, RotateCcw, CheckCircle, ArrowLeft } from "lucide-react";
import { javascript } from "@codemirror/lang-javascript";
import CodeMirror from "@uiw/react-codemirror";

function App() {
  const [aiReady, setAiReady] = useState(false);
  const [questionData, setQuestionData] = useState(null);
  const [feedback, setFeedback] = useState("");
  const [loading, setLoading] = useState(false);
  const [solved, setSolved] = useState(false);
  const [difficulty, setDifficulty] = useState("");
  const [warning, setWarning] = useState("");
  const [code, setCode] = useState(
    `function solution() {\n // Your code here\n}`
  );

  useEffect(() => {
    const checkReady = setInterval(() => {
      if (window.puter?.ai?.chat) {
        setAiReady(true);
        clearInterval(checkReady);
      }
    }, 300);
    return () => clearInterval(checkReady);
  }, []);

  const handleSelectDifficulty = (level) => {
    setDifficulty(level);
    if (warning) setWarning("");
  };

  const generateQuestion = async () => {
    const validLevels = ["Beginner", "Medium", "Intermediate"];

    if (!validLevels.includes(difficulty)) {
      setWarning(
        "Please select a difficulty level before generating a question."
      );
      return;
    }
    setWarning("");
    setLoading(true);
    setFeedback("");
    setSolved(false);
    setCode(`function solution() {\n // Your code here\n}`);
    setQuestionData(null);

    try {
      const res = await window.puter.ai.chat(
        `Generate a random ${difficulty} level coding interview question like on LeetCode. Return only valid JSON with this structure: 
          {
            "problem": "string",
            "example": "string",
            "constraints": "string",
            "note": "string or empty if none"
          }
        `
      );

      const reply = typeof res === "string" ? res : res.message?.content || "";

      const parsed = JSON.parse(reply);

      setQuestionData(parsed);
    } catch (error) {
      setFeedback(`Error: ${error.message}`);
    }
    setLoading(false);
  };

  const checkSolution = async () => {
    if (!code.trim()) return;

    setLoading(true);

    try {
      const res = await window.puter.ai.chat(`
      You are a helpful interview coach.
      The question is: "${questionData?.problem}".
      Here is the candidate's solution:\n${code}

      1. If correct, start your reply with: ✅ Correct! Well done."
      2. If wrong, start your reply with: ❌ and then give hints but don't reveal the full answer.
    `);

      const reply = typeof res === "string" ? res : res.message?.content || "";
      setFeedback(reply);

      if (reply.includes("✅")) setSolved(true);
    } catch (error) {
      setFeedback(`Error: ${error.message}`);
    }
    setLoading(false);
  };

  return (
    <div className="min-h-screen flex-col flex items-center justify-center p-6">
      <div className="w-full max-w-7xl flex flex-col items-center justify-center">
        {!questionData ? (
          <div className="w-full max-w-md p-10 border border-gray-700 rounded-3xl  text-center">
            <h2 className="text-5xl font-bold mb-4">CodeRipple</h2>
            <h2 className="text-xl text-black">
              Practice your coding skill here
            </h2>
            <p className="text-gray-400 mb-8 text-sm">
              solve coding questions generated by AI, get hints, and improve
              your skills.
            </p>
            <hr className="mb-8 h-0.5 text-gray-200" />
            <div className="mb-8">
              <p className="text-black font-medium mb-3 text-md text-center">
                Select Difficulty
              </p>
              <div className="flex justify-center gap-3 flex-wrap sm:flex-nowrap">
                {["Beginner", "Medium", "Intermediate"].map((level) => (
                  <button
                    key={level}
                    onClick={() => handleSelectDifficulty(level)}
                    className={`px-7.5 py-2 rounded-md text-xs border border-gray-200 transition-colors duration-300 cursor-pointer ${
                      difficulty === level
                        ? "bg-slate-200 border border-black text-black"
                        : "bg-white text-black hover:bg-slate-100"
                    }`}
                  >
                    {level}
                  </button>
                ))}
              </div>
            </div>
            {warning && (
              <p className="text-red-500 text-xs mb-4 bg-red-50 p-2 border border-red-300 rounded-md">
                {warning}
              </p>
            )}
            <button
              onClick={generateQuestion}
              disabled={!aiReady || loading}
              className="w-full rounded-md py-3 text-sm bg-black text-white hover:bg-gray-800 border transition-colors duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {loading ? "Generating..." : "Generate"}
            </button>
          </div>
        ) : (
          <div className="space-y-6 w-full">
            <div className="grid lg:grid-cols-2 gap-6">
              <div className="border border-black/30 rounded-xl p-8 space-y-4">
                <div>
                  <h3 className="text-lg font-semibold mb-1">Problem</h3>
                  <p className="text-gray-700">{questionData.problem}</p>
                </div>

                <div>
                  <h3 className="text-lg font-semibold mb-1">Example</h3>
                  <pre className="text-gray-700 text-sm border-gray-300 border bg-black/4 rounded p-3 whitespace-pre-wrap">
                    {questionData.example}
                  </pre>
                </div>

                <div>
                  <h3 className="text-lg font-semibold mb-1">Constraints</h3>
                  <ul className="list-inside text-gray-700">
                    {questionData.constraints.split("\n").map((line, index) => (
                      <li key={index}>{line}</li>
                    ))}
                  </ul>
                </div>
                <hr className="h-0.5 text-gray-200" />
                {questionData.note && (
                  <div>
                    <h3 className="text-md font-semibold mb-1">Note</h3>
                    <p className="text-gray-500 text-sm">{questionData.note}</p>
                  </div>
                )}
              </div>
              <div className="border border-gray-400 rounded-xl overflow-hidden">
                <div className="bg-black text-white px-4 py-3 border-b border-gray-300 flex items-center gap-3">
                  <Code className="h-5 w-5" />
                  <h3 className="text-md font-semibold">Solution</h3>
                </div>
                <CodeMirror
                  value={code}
                  height="550px"
                  extensions={[javascript({ jsx: true })]}
                  onChange={(val) => setCode(val)}
                />
              </div>
            </div>

            <div className="flex gap-6 lg:gap-10 justify-center items-center flex-col lg:flex-row">
              <div className="flex flex-wrap gap-3 justify-center items-center">
                <button
                  onClick={checkSolution}
                  disabled={loading || !aiReady || !code.trim()}
                  className="flex px-5 py-2 text-sm rounded-lg bg-black text-white hover:bg-gray-800 border items-center transition-all duration-300 justify-center gap-2 cursor-pointer"
                >
                  <Play className="w-5 h-5" />
                  {loading ? "Checking..." : "Check Solution"}
                </button>

                <button
                  onClick={generateQuestion}
                  disabled={loading || !aiReady || !code.trim()}
                  className="flex px-5 py-2 text-sm rounded-lg bg-black text-white hover:bg-gray-800 border items-center transition-all duration-300 justify-center gap-2 cursor-pointer"
                >
                  <RotateCcw className="w-5 h-5" />
                  {loading ? "Generating..." : "Generate"}
                </button>

                <button
                  onClick={() => {
                    setQuestionData(null);
                    setCode(`function solution() {\n //Your code here\n}`);
                    setFeedback("");
                    setSolved(false);
                    setWarning("");
                    setDifficulty("");
                  }}
                  disabled={loading || !aiReady || !code.trim()}
                  className="flex px-5 py-2 text-sm rounded-lg bg-black text-white hover:bg-gray-800 border items-center transition-all duration-300 justify-center gap-2 cursor-pointer"
                >
                  <ArrowLeft className="w-5 h-5" />
                  Go Back
                  {loading}
                </button>
              </div>

              <div className="flex gap-3 items-center flex-wrap">
                <p className="text-gray-500 text-sm font-extrabold">
                  Difficulty
                </p>
                {["Beginner", "Medium", "Intermediate"].map((level) => (
                  <button
                    key={level}
                    onClick={() => handleSelectDifficulty(level)}
                    className={`px-2 py-2 rounded-md text-xs border border-gray-200 transition-colors duration-300 cursor-pointer ${
                      difficulty === level
                        ? "bg-slate-200 border border-black text-black"
                        : "bg-white text-black hover:bg-slate-100"
                    }`}
                  >
                    {level}
                  </button>
                ))}
              </div>
            </div>

            {feedback && (
              <div
                className={`rounded-3xl p-6 ${
                  feedback.includes("✅")
                    ? "bg-green-200/40 border border-green-800/30"
                    : feedback.includes("❌")
                    ? "bg-red-200/40 border border-red-800/30"
                    : "bg-black/4 border border-gray-300"
                }`}
              >
                <div className="flex items-center gap-4">
                  <CheckCircle
                    className={`w-6 h-6 ${
                      feedback.includes("✅")
                        ? "text-green-400"
                        : feedback.includes("❌")
                        ? "text-red-400"
                        : "text-blue-400"
                    }`}
                  />

                  <div className="flex-1 text-black whitespace-pre-wrap leading-relaxed">
                    {feedback}
                  </div>
                </div>
              </div>
            )}
          </div>
        )}
      </div>
      <div className="text-center mt-10">
        <p className="text-gray-400 text-sm font-light">
          © 2025 CodeRipple. All rights reserved.
        </p>
      </div>
    </div>
  );
}

export default App;
